# app.yaml
# Este archivo configura cómo DigitalOcean App Platform desplegará y ejecutará tu aplicación.

# Nombre de la aplicación (se usará en la URL y la UI de DO)
name: fishing-ai-api # Puedes cambiar este nombre

# Especifica los servicios web para tu aplicación
services:
  - name: web # Nombre de este servicio web
    type: web
    # Importante: Revertimos a 'language: python' y el buildpack se inferirá junto con .python-version.
    # Se eliminó la URL explícita del buildpack para evitar conflictos.
    language: python

    # Directorio raíz donde se encuentra tu código ( '.' significa el directorio actual)
    source_dir: .

    # Comando que se ejecuta para construir tu aplicación.
    # Para Python, esto suele ser la instalación de las dependencias.
    build_command: pip install -r requirements.txt

    # **Actualizado:** Usa 'start_command' para definir explícitamente cómo iniciar la aplicación.
    # Se añadió '--worker-tmp-dir /dev/shm' según la recomendación del log para mejorar la robustez.
    start_command: gunicorn --worker-class gevent --workers 4 --bind :8080 app:app --worker-tmp-dir /dev/shm

    # Puerto HTTP en el que la aplicación escuchará.
    http_port: 8080

    # Rutas que se mapearán a este servicio.
    # 'path: /' significa que este servicio manejará todas las rutas base.
    routes:
      - path: /

    # Especifica las variables de entorno para este servicio.
    # La clave API de Gemini será inyectada automáticamente por el entorno de Canvas.
    # Si tuvieras otras variables de entorno personalizadas, las definirías aquí.
    # envs:
    #   - key: MY_CUSTOM_VARIABLE
    #     value: "some_value"

    # Configuración de recursos (opcional, ajusta según tus necesidades y costos)
    # instance_size_slug: basic-xxs # Por ejemplo, 'basic-xxs' (512MB RAM, 1vCPU)
    # instance_count: 1 # Número de instancias para escalar (para empezar, 1 es suficiente)
